'''
> Key Buckets
> - *jlm-ces-demo-composite-list* - contains CSVs with the listing of CSVs summarizing the URLs to call transcripts
> - *jm-ces-transcripts* - contains HTML version of the original transcript
> - *cesprocessed* - contains processed CSV version of the original transcript
> - *jm-athena-outputs* - contains Athena output generated by athena queries
> - *jm-athena-outputs* - contains Athena output generated by athena queries
> - *jm-jm-ces-esg-summaries* - contains key summaries used by streamlit to render the final products
    > - macro_raw_ticker listing (4,000 tickers symbols and their names)
    > - macro_urls (urls to 15,000 original transcripts )
    > - esg_board_profiles (board profiles for the 309 tickers)
    > - esg_company_profiles (309 tikcers and granular address detail information corresponding to companies with at least 5 mentions)
    > - esg_ticker_discourse.csv

'''


import helper_scripts as hs
import data_scripts as ds
import pandas as pd
import streamlit as st 



def main():
    
    st.title("ESG Transcript Analysis")

    with st.sidebar:
        st.header("Data Refresh")

    df_esg_discourse, df_esg_pivot, df_board_profiles, df_urls, df_raw_tickers = ds.fn_get_data()
    
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["Summary", "Search Criteria", "Company Profile", "Board Profile","Transcript Highlights","TO DO"])
    
    with tab6:
        html_string = f'<ul>  \
             <li>Make the stock filterings smarter - add an ALL filter </li>    \
             <li> </li>    \
            <li> </li>     \
          <ul>'
        st.markdown(html_string, unsafe_allow_html=True)
    
    
    with tab1:
        with st.expander("Info"):
            st.info("FinBERT is a pre-trained NLP model to analyze sentiment of financial text. \
                It is built by further training the BERT language model in the finance domain, \
                    using a large financial corpus and thereby fine-tuning it for financial \
                    sentiment classification.  FinBERT-ESG is a FinBERT model fine-tuned on 2,000 manually \
                    annotated sentences from firms' ESG reports and annual reports. (https://huggingface.co/yiyanghkust/finbert-esg)")
       
        ds.fn_utterance_rank_barchart(df_urls, df_raw_tickers)
        ds.fn_utterance_time_series_bar_chart(df_esg_discourse)
        ds.fn_utterance_industry_bubble_chart(df_esg_discourse)

    with tab2:
        
        
        esg_ticker_list = (set(df_esg_pivot['ticker_symbol']))
        max_environmental_mentions = max(set(df_urls['environmental_mentions']))
            
        val = st.slider('ESG Mention Range (mentions >90% prob', min_value=1, max_value=max_environmental_mentions, value=2, step=1, format=None, key=None, help=None, on_change=None, args=None, kwargs=None, disabled=False, label_visibility="visible")
        st.info('Throughout 2020-2022, Company Executives and Stock Analysts in quarterly calls made explicit mention of \
                ESG related Environmental and Decarb topics. \
                Use the slider to filter the stock tickers according to the number of ESG mentions (min 5) \
                ')
            
        vital_transcripts = df_urls[df_urls['environmental_mentions']>=val]
        vital_tickers = sorted(set(vital_transcripts['ticker_symbol']))
        #vital_tickers.insert(0,'ALL')
                
        st.success(f"{len(vital_tickers)} ticker(s) in dataset with at least {val} mentions.")
        board_ticker_choice =  st.multiselect('', (vital_tickers))
   
        prob = st.slider('ESG Probability', min_value=0.8, max_value=1.0, value=0.9, step=0.05, format=None, key=None, help=None, on_change=None, args=None, kwargs=None, disabled=False, label_visibility="visible")

        
        with st.expander("Info"):
            st.info('Each line of our 14,000 transcript population has been analyzed in advance using \
                    a robust pre-trained FinBERT sentiment analysis model \
                    to confer a probability that utterances refer to ESG topics focused \
                    on Energy, Renewables, Environmental. The higher the probability, the more confident \
                    we are that the conversation is related to the subject that interests us. ')
    
        if len(board_ticker_choice)<=0:
            st.write('PLEASE - Make sure you select at least one ticker symbol or select ALL')
        else:
            st.write('Current Selections')
            st.write(board_ticker_choice)
            
        go = st.button('Run Analysis Now')
        
        if go:
            # if they selected ALL then make sure board_ticker_choice reflects entire listing of symbols
            # available     
            if board_ticker_choice[0] == 'ALL':
                board_ticker_choice = vital_tickers
        
        
    with tab3:
        
        st.write('Company Profile(s)')
        
        if go == False:
            '''
            Select ticker symbol on search criteria tab to proceed.
            '''
        
        if board_ticker_choice and go:
            
            df_t = df_esg_pivot[df_esg_pivot['ticker_symbol'].isin(board_ticker_choice)]
            df_t.apply(lambda x: ds.fn_print_company_profiles(x['ticker_symbol'], \
                            x['company_name'],
                            x['address1'],
                            x['address2'],
                            x['address3'],
                            x['phone'],
                            x['company_sector'],
                            x['industry'],
                            x['revenue'],
                            x['netincome'],
                            x['employees']), axis=1)
                        
        
    
    
    with tab4:    
        
        if go == False:
            '''
            Select ticker symbol on search criteria tab to proceed.
            '''
        
        if board_ticker_choice and go:
            vital_tickers = pd.DataFrame(board_ticker_choice)
            vital_tickers = vital_tickers[0].tolist()
            
            if 'ALL' in vital_tickers:
                vital_board_profiles = df_board_profiles
            else:
                vital_board_profiles = df_board_profiles[df_board_profiles['ticker_symbol'].isin(vital_tickers)]
            
            if len(vital_board_profiles)>0 :
                st.success(f"For {vital_tickers}, {len(vital_board_profiles)} Board Profiles in dataset")
                ds.fn_print_sh('Board of Director Profiles','blue')
                
                #with st.expander("View Profiles"):
                vital_board_profiles.apply(lambda x: ds.fn_print_board_profiles(x['board_member_name'], \
                    x['board_member_url'],x['board_member_title'],x['ticker_symbol'],x['board_member_profile'],x['last_updated'] ), axis=1)
                
                #st.write(vital_board_profiles)
        
    with tab5:
            
            if go == False:
                '''
                Select ticker symbol on search criteria tab to proceed.
                '''
            
            if go:
                
                if 'ALL' in vital_tickers:
                    vital_transcripts = df_esg_discourse[(df_esg_discourse['score']>=prob)]
                else:
                    vital_transcripts = df_esg_discourse[(df_esg_discourse['score']>=prob) & (df_esg_discourse['company'].isin(board_ticker_choice))]
                    
                ds.fn_print_sh('Transcript True Positives','blue')
                #with st.expander("View Select Utterances"):
                #st.write(vital_transcripts)
                vital_transcripts.apply(lambda x: ds.fn_print_transcript_snippet(x['name'],
                                                                                    x['title'], 
                                                                                    x['role'],
                                                                                    x['company'],
                                                                                    x['organization'],
                                                                                    x['call_date'],
                                                                                    x['discourse'],
                                                                                    x['score'],
                                                                                    x['label']), axis=1)
                
                    
    
    
    # dictIN = ds.fn_demo_tree_chart()
    # ds.render_basic_tree(dictIN)
    
            
 
    # df_tickers = ds.fn_return_tickers()
    # st.dataframe(df_tickers)
    
    # df_urls = ds.fn_return_urls()
    # st.dataframe(df_urls)
    
    #

if __name__ == "__main__":
    
   
    st.set_page_config(
        page_title="CES Transcript Scrape Demo", page_icon=":chart_with_upwards_trend:"
    )
    
    
    m = st.markdown("""
        <style>
        div.stButton > button:first-child {
            background-color: rgb(204, 49, 49);
            color:white;
        }
        </style>""", unsafe_allow_html=True)


    main()
    with st.sidebar:
        st.markdown("---")
        
        
        st.markdown(
            ' ',
           # '<h6>Made in &nbsp<img src="https://streamlit.io/images/brand/streamlit-mark-color.png" alt="Streamlit logo" height="16">&nbsp by <a href="https://twitter.com/andfanilo">@andfanilo</a></h6>',
            unsafe_allow_html=True,
        )
       